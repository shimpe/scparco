TITLE:: ParserState
summary:: holds the internal state of a parser
categories:: ScpParser Tools
related:: Classes/ScpParser

DESCRIPTION::
ParserState uses the internal state of a parser. It has methods to update that state and to pretty-print it.



CLASSMETHODS::

METHOD:: new
creates a new ParserState

ARGUMENT:: target
string/Int8Array that is being parsed

ARGUMENT:: index
current position in the string as parsing is proceeding

ARGUMENT:: result
result of parsing the string, will be a string by default, but can be transformed by specifying a map on the parser

ARGUMENT:: isError
boolean to indicate if parsing failed

ARGUMENT:: errorMsg
string with some explanation about what error occurred. Error msgs can be made contextual by specifying a n erorrMap on the parser

returns:: a new ParserState

INSTANCEMETHODS::

METHOD:: target
the string to be parsed (text parsers) or an Int8Array (binary parsers)

returns:: a string or an Int8Array
METHOD:: index
the position in the string/stream where we are during parsing

returns:: an integer
METHOD:: result
	the result of parsing, e.g. in case of an IntegerParser this could be an integer.
	(Side-Note: results produced by parsers can be influenced by specifying a map operation on the parser,
	and can influence how parsing proceeds by specifying a chain operation on the parser.)
	

returns:: anything you want it to
METHOD:: isError
a boolean to indicate if parsing failed

returns:: a boolean
METHOD:: errorMsg
a string to give some explanation about what went wrong

returns:: a string
METHOD:: trace
a boolean to indicate if the parsers log themselves for debugging purposes

returns:: a boolean
METHOD:: init
initializes a new ParserState

ARGUMENT:: target
string/Int8Array that is being parsed

ARGUMENT:: index
current position in the string as parsing is proceeding

ARGUMENT:: result
result of parsing the string, will be a string by default, but can be transformed by specifying a map on the parser

ARGUMENT:: isError
boolean to indicate if parsing failed

ARGUMENT:: errorMsg
string with some explanation about what error occurred. Error msgs can be made contextual by specifying a n erorrMap on the parser

returns:: an initialized ParserState
METHOD:: prettyprint
prints a readable representation of the ParserState to the post window; in case of errors it will just show the error msg

returns:: this instance of ParserState

METHOD:: print
prints the contents of the ParserState to the post window

returns:: this instance of ParserState

METHOD:: updateState
creates a completely new ParserState out of the current one with a new result and updated index

ARGUMENT:: newindex
updated index

ARGUMENT:: newresult
updated result

returns:: ParserState
METHOD:: updateResult
creates a completely new ParserState out of the current one with a new result
	updateResult will also reset isError to false since we assume having a result means that parsing succeeded
	

ARGUMENT:: newresult
updated result

returns:: ParserState
METHOD:: updateError
creates a completely new ParserState out of the current one to represents an error
	

ARGUMENT:: errorMsg
error message to be shown to the user

returns:: ParserState

EXAMPLES::

code::
(FIXME add some example code)
::
